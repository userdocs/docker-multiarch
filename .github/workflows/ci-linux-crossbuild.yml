name: ci - linux binary cross build

on:
  workflow_call:
    secrets:
      vt_api_key:
        required: true
      GH_TOKEN:
        required: true
    inputs:
      source_repo:
        type: string
        required: true
      source_branch:
        type: string
        required: true
      artifacts_only:
        type: boolean
        required: true
env:
  GH_TOKEN: "${{ github.TOKEN }}"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      set-tag: ${{ steps.set-tag.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        name: [iperf3]
        os_id: [alpine]
        os_version_id: [edge]
        arch: [x86, x86_64, armhf, armv7, aarch64, ppc64le, riscv64, s390x]
        include:
          - arch: x86
            qbt-musl-cross-make: "i686-linux-musl"

          - arch: x86_64
            qbt-musl-cross-make: "x86_64-linux-musl"

          - arch: armhf
            qbt-musl-cross-make: "armv6-linux-musleabihf"

          - arch: armv7
            qbt-musl-cross-make: "armv6-linux-musleabihf"

          - arch: armv7
            qbt-musl-cross-make: "armv7l-linux-musleabihf"

          - arch: aarch64
            qbt-musl-cross-make: "aarch64-linux-musl"

          - arch: ppc64le
            qbt-musl-cross-make: "powerpc64le-linux-musl"

          - arch: riscv64
            qbt-musl-cross-make: "riscv64-linux-musl"

          - arch: s390x
            qbt-musl-cross-make: "s390x-linux-musl"

    name: ${{ matrix.name }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.arch }}

    env:
      CDN: http://dl-cdn.alpinelinux.org/alpine/edge/main/
      CXXFLAGS: "--static -static"
      CPPFLAGS: "--static -static"
      LDFLAGS: "--static -static"

    steps:
      - name: Checkout ${{ github.event.inputs.distinct_id }}
        uses: actions/checkout@v4

      - name: test
        run: |
          echo "yolo: ${{ inputs.source_repo }}"
          exit

      - name: Host - phased updates ${{ github.event.inputs.distinct_id }}
        run: printf '%s\n' 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - update ${{ github.event.inputs.distinct_id }}
        run: sudo apt-get update

      # - name: Host - upgrade ${{ github.event.inputs.distinct_id }}
      #   run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support ${{ github.event.inputs.distinct_id }}
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Create docker multiarch ${{ matrix.platform }} container
        run: docker run --name multiarch -it -d -w /root -e CXXFLAGS="${{ env.CXXFLAGS }}" -e CPPFLAGS="${{ env.CPPFLAGS }}" -e LDFLAGS="${{ env.LDFLAGS }}" -v ${{ github.workspace }}:/root ghcr.io/userdocs/qbt-musl-cross-make:${{ matrix.qbt-musl-cross-make }}

      - name: Run apk update
        run: docker exec multiarch apk update --repository=${{ env.CDN }}

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository=${{ env.CDN }}

      - name: mkdir -p /root/local
        run: docker exec multiarch /bin/bash /root/crossbuild.sh ${{ inputs.source_repo }} ${{ inputs.source_branch }} ${{ matrix.qbt-musl-cross-make }}

      - name: Rename ${{ matrix.name }} to ${{ matrix.name }}-${{ matrix.arch }}
        run: docker exec multiarch mv -f /root/local/bin/${{ matrix.name }} /root/${{ matrix.name }}-${{ matrix.arch }}

      - name: Create path to binary env
        run: echo "binary_path=${{ github.workspace }}/${{ matrix.name }}-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: VirusTotal Scan
        id: virustotal
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: ${{ env.binary_path }}

      - name: sha256sum ${{ github.event.inputs.distinct_id }}
        run: |
          printf '%s' https://www.virustotal.com/gui/file/$(sha256sum ${{ env.binary_path }} | awk '{print $1}') > ${{ matrix.name }}-${{ matrix.arch }}.url
          cat ${{ matrix.name }}-${{ matrix.arch }}.url

      - name: Create tag env
        run: echo "release_tag=$(sed -rn 's|(.*)\[(.*)],\[https://github.com/esnet/iperf],(.*)|\2|p' ${{ matrix.name }}/configure.ac)" >> $GITHUB_ENV

      - name: Set tag env to output
        id: set-tag
        run: echo "release_tag=${{ env.release_tag }}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation  ${{ github.event.inputs.distinct_id }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ env.binary_path }}

      - name: "Create artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }} ${{ env.release_tag }}
          path: |
            ${{ env.binary_path }}
            ${{ matrix.name }}-${{ matrix.arch }}.url

  release:
    runs-on: ubuntu-latest
    needs: build
    if: inputs.artifacts_only == '0' && always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: "release-artifacts"
          pattern: iperf3-*
          merge-multiple: true

      - name: Virustotal scan results
        run: |
          pushd release-artifacts || exit 1

          for virus_total_urls in iperf3-*\.url; do
            dependency_version+=("${virus_total_urls}")
          done

          readarray -t release_sorted < <(printf '%s\n' "${dependency_version[@]}" | sort)

          for filenames in "${release_sorted[@]}"; do
            virustotal_url="$(head -1 "${filenames}" | tr -d '\n')"
            sed -i -r 's|(\['${filenames//\.url/}'\])\((.*)\)|\1('${virustotal_url}')|' ${{ github.workspace }}/release-body.md
          done

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Automated Change
          file_pattern: "release-body.md"

      - name: "Publish release ${{ needs.build.outputs.set-tag }}"
        if: inputs.artifacts_only == '0'
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: release-artifacts/iperf3-*[!\.url]
          replacesArtifacts: true
          tag: ${{ needs.build.outputs.set-tag }}
          name: iperf3 ${{ needs.build.outputs.set-tag }}
          allowUpdates: true
          bodyFile: release-body.md
          token: ${{ github.token }}
